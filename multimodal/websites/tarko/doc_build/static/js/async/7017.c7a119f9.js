"use strict";(self.webpackChunk_tarko_docs=self.webpackChunk_tarko_docs||[]).push([["7017"],{2816:function(e,n,r){r.r(n),r.d(n,{default:()=>h});var t=r(1360),s=r(5155);function i(e){let n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"介绍",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#介绍",children:"#"}),"介绍"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Tarko"})," ",(0,t.jsx)(n.em,{children:"(Tool-augmented Agent Runtime Kernel, Open-source)"}),"，发音是 ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"/ˈtɑːrkoʊ/"})}),'，是一个以 "Tool Call" 和 "事件流" 驱动的 Agent 运行时框架，内置了强大的 ',(0,t.jsx)(n.strong,{children:"Context Engineering"})," 能力。"]}),"\n",(0,t.jsxs)(n.h2,{id:"什么是-tarko",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#什么是-tarko",children:"#"}),"什么是 Tarko？"]}),"\n",(0,t.jsx)(n.p,{children:"Tarko 提供以下核心能力："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Context Engineering"}),": 构建支持长程运行的 Agent 核心能力"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Tool Call Engine"}),": 支持多种 LLM Provider 的统一工具调用接口"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Event Stream Processing"}),": 原生流式处理和 Agent Protocol 支持"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Agent Hooks"}),": 强大的扩展能力"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Agent Protocol"}),": Agent 生命周期的标准格式定义"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"核心特性",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#核心特性",children:"#"}),"核心特性"]}),"\n",(0,t.jsxs)(n.h3,{id:"-tool-call-engine",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-tool-call-engine",children:"#"}),"\uD83D\uDD27 Tool Call Engine"]}),"\n",(0,t.jsx)(n.p,{children:"支持多种 Tool Call 引擎，包括原生 Function Call、自定义解析器，以及不支持原生 Function Tool 的模型。"}),"\n",(0,t.jsxs)(n.h3,{id:"-event-stream",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-event-stream",children:"#"}),"\uD83C\uDF0A Event Stream"]}),"\n",(0,t.jsx)(n.p,{children:"内置事件流处理，支持原生流式传输和标准化的 Agent Protocol。"}),"\n",(0,t.jsxs)(n.h3,{id:"-context-engineering",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-context-engineering",children:"#"}),"\uD83E\uDDE0 Context Engineering"]}),"\n",(0,t.jsx)(n.p,{children:"先进的上下文管理，支持长程运行的 Agent 操作和自动上下文优化。"}),"\n",(0,t.jsxs)(n.h3,{id:"-agent-hooks",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-agent-hooks",children:"#"}),"\uD83D\uDD0C Agent Hooks"]}),"\n",(0,t.jsx)(n.p,{children:"可扩展的钩子系统，允许在执行的每个阶段自定义 Agent 行为。"}),"\n",(0,t.jsxs)(n.h2,{id:"架构概览",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#架构概览",children:"#"}),"架构概览"]}),"\n",(0,t.jsx)(n.p,{children:"Tarko 采用三层架构设计："}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"工程层"}),": CLI、Server 和 UI 组件"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"应用层"}),": 基于 Tarko 的 Agent 实现"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"内核层"}),": 包含 Context Engineering 和 Agent Protocol 的核心运行时"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"谁在使用-tarko",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#谁在使用-tarko",children:"#"}),"谁在使用 Tarko？"]}),"\n",(0,t.jsx)(n.p,{children:"Tarko 驱动了多个生产系统："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://seed-tars.com/showcase/ui-tars-2/",rel:"noopener noreferrer",target:"_blank",children:"UI-TARS-2"})}),": 先进的 UI 自动化"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://github.com/bytedance/UI-TARS-desktop",rel:"noopener noreferrer",target:"_blank",children:"UI-TARS-desktop"})}),": 桌面自动化"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://agent-tars.com/",rel:"noopener noreferrer",target:"_blank",children:"Agent TARS"})}),": 通用多模态 Agent"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"下一步",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#下一步",children:"#"}),"下一步"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/zh/guide/get-started/quick-start.html",children:"快速开始"})," - 创建你的第一个 Tarko Agent"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/zh/guide/get-started/architecture.html",children:"架构设计"})," - 了解 Tarko 的设计原理"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/zh/examples/getting-started.html",children:"示例"})," - 探索实用示例"]}),"\n"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["zh%2Fguide%2Fget-started%2Fintroduction.mdx"]={toc:[{id:"什么是-tarko",text:"什么是 Tarko？",depth:2},{id:"核心特性",text:"核心特性",depth:2},{id:"-tool-call-engine",text:"\uD83D\uDD27 Tool Call Engine",depth:3},{id:"-event-stream",text:"\uD83C\uDF0A Event Stream",depth:3},{id:"-context-engineering",text:"\uD83E\uDDE0 Context Engineering",depth:3},{id:"-agent-hooks",text:"\uD83D\uDD0C Agent Hooks",depth:3},{id:"架构概览",text:"架构概览",depth:2},{id:"谁在使用-tarko",text:"谁在使用 Tarko？",depth:2},{id:"下一步",text:"下一步",depth:2}],title:"介绍",headingTitle:"介绍",frontmatter:{title:"介绍",description:"了解 Tarko，一个工具增强的 Agent 运行时内核"}}}}]);