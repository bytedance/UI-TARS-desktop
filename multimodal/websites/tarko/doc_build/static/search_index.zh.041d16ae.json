[{"title":"Agent Server API","content":"#\n\nTarko Agent Server 的完整 API 参考。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的 API 文档，包括：\n\n * Server 构造函数选项\n * HTTP 端点\n * WebSocket 事件\n * 配置接口\n * 响应模式\n\n目前请参考 英文版 Agent Server API 文档 了解详细信息。","routePath":"/zh/api/agent-server","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":35}],"frontmatter":{"title":"Agent Server API","description":"Tarko Agent Server 的完整 API 参考"},"version":""},{"title":"Agent API","content":"#\n\nTarko Agent 类的完整 API 参考。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的 API 文档，包括：\n\n * Agent 构造函数选项\n * 方法签名\n * 事件类型\n * 配置接口\n * 类型定义\n\n目前请参考 英文版 Agent API 文档 了解详细信息。","routePath":"/zh/api/agent","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":29}],"frontmatter":{"title":"Agent API","description":"Tarko Agent 的完整 API 参考"},"version":""},{"title":"Context Engineering API","content":"#\n\nTarko Context Engineering 的完整 API 参考。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的 API 文档，包括：\n\n * Context Engineering 配置\n * 压缩策略\n * 窗口算法\n * 持久化选项\n * 自定义实现\n\n目前请参考 英文版 Context Engineering API 文档 了解详细信息。","routePath":"/zh/api/context-engineering","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":42}],"frontmatter":{"title":"Context Engineering API","description":"Tarko Context Engineering 的完整 API 参考"},"version":""},{"title":"Hooks API","content":"#\n\nTarko Agent Hooks 的完整 API 参考。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的 API 文档，包括：\n\n * Hook 接口\n * 上下文对象\n * Hook 组合\n * 插件架构\n * 自定义 Hook 开发\n\n目前请参考 英文版 Hooks API 文档 了解详细信息。","routePath":"/zh/api/hooks","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":34}],"frontmatter":{"title":"Hooks API","description":"Tarko Agent Hooks 的完整 API 参考"},"version":""},{"title":"Tool Call Engine API","content":"#\n\nTarko Tool Call Engine 的完整 API 参考。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的 API 文档，包括：\n\n * Tool Call Engine 接口\n * 工具创建工具\n * 解析器配置\n * 错误处理类型\n * 自定义引擎实现\n\n目前请参考 英文版 Tool Call Engine API 文档 了解详细信息。","routePath":"/zh/api/tool-call-engine","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":39}],"frontmatter":{"title":"Tool Call Engine API","description":"Tarko Tool Call Engine 的完整 API 参考"},"version":""},{"title":"自定义 Hooks","content":"#\n\n使用自定义 Hooks 扩展 Agent 行为。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的自定义 Hooks 示例，包括：\n\n * Hook 组合模式\n * 插件开发\n * 监控和分析 Hooks\n * 性能优化 Hooks\n * 错误处理和恢复 Hooks\n\n目前请参考 英文版自定义 Hooks 文档 了解详细信息。","routePath":"/zh/examples/custom-hooks","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":29}],"frontmatter":{"title":"自定义 Hooks","description":"使用自定义 Hooks 扩展 Agent 行为"},"version":""},{"title":"自定义工具","content":"#\n\n为你的 Tarko Agent 构建高级自定义工具。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的自定义工具示例，包括：\n\n * 高级工具模式\n * 工具组合\n * 流式工具\n * 工具验证和错误处理\n * 工具测试策略\n\n目前请参考 英文版自定义工具文档 了解详细信息。","routePath":"/zh/examples/custom-tools","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":31}],"frontmatter":{"title":"自定义工具","description":"为你的 Tarko Agent 构建高级自定义工具"},"version":""},{"title":"入门示例","content":"#\n\n帮助你快速开始使用 Tarko 的实用示例。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的入门示例，包括：\n\n * 基础 Agent 示例\n * 天气 Agent\n * 计算器 Agent\n * 文件系统 Agent\n * 运行和测试示例\n\n目前请参考 英文版入门示例 了解详细信息。","routePath":"/zh/examples/getting-started","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":27}],"frontmatter":{"title":"入门示例","description":"帮助你快速开始使用 Tarko 的实用示例"},"version":""},{"title":"协议集成","content":"#\n\n与 Tarko 的 Agent Protocol 集成。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的协议集成示例，包括：\n\n * Event Stream 集成\n * 自定义 UI 开发\n * 协议扩展\n * 实时通信\n * 第三方集成\n\n目前请参考 英文版协议集成文档 了解详细信息。","routePath":"/zh/examples/protocol-integration","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":33}],"frontmatter":{"title":"协议集成","description":"与 Tarko 的 Agent Protocol 集成"},"version":""},{"title":"服务器集成","content":"#\n\n将 Tarko Agent 部署为生产服务器。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的服务器集成示例，包括：\n\n * 生产服务器部署\n * Docker 容器化\n * 负载均衡和扩展\n * 监控和日志\n * 认证和安全\n\n目前请参考 英文版服务器集成文档 了解详细信息。","routePath":"/zh/examples/server-integration","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":28}],"frontmatter":{"title":"服务器集成","description":"将 Tarko Agent 部署为生产服务器"},"version":""},{"title":"Agent Hooks","content":"#\n\n使用强大的钩子系统扩展和自定义 Agent 行为。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的 Agent Hooks 文档，包括：\n\n * 生命周期钩子\n * 消息处理钩子\n * 工具执行钩子\n * 自定义钩子实现\n * 插件系统\n\n目前请参考 英文版 Agent Hooks 文档 了解详细信息。","routePath":"/zh/guide/agent-hooks","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":30}],"frontmatter":{"title":"Agent Hooks","description":"使用强大的钩子系统扩展和自定义 Agent 行为"},"version":""},{"title":"Agent Protocol","content":"#\n\n了解 Tarko 的标准化通信协议。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的 Agent Protocol 文档，包括：\n\n * Event Stream 协议\n * Server Protocol\n * 事件类型\n * 协议扩展\n * 集成示例\n\n目前请参考 英文版 Agent Protocol 文档 了解详细信息。","routePath":"/zh/guide/agent-protocol","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":23}],"frontmatter":{"title":"Agent Protocol","description":"了解 Tarko 的标准化通信协议"},"version":""},{"title":"架构设计","content":"#\n\n了解 Tarko 的三层架构设计。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的架构文档，包括：\n\n * 三层架构详解\n * 工程层组件\n * 应用层实现\n * 内核层核心能力\n * 设计原则\n\n目前请参考 英文版架构文档 了解详细信息。","routePath":"/zh/guide/architecture","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":22}],"frontmatter":{"title":"架构设计","description":"了解 Tarko 的三层架构设计"},"version":""},{"title":"Context Engineering","content":"#\n\n掌握长程运行 Agent 操作的先进上下文管理。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的 Context Engineering 文档，包括：\n\n * 智能上下文压缩\n * 上下文窗口策略\n * 状态持久化\n * 内存优化\n * 自定义实现\n\n目前请参考 英文版 Context Engineering 文档 了解详细信息。","routePath":"/zh/guide/context-engineering","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":29}],"frontmatter":{"title":"Context Engineering","description":"掌握长程运行 Agent 操作的先进上下文管理"},"version":""},{"title":"介绍","content":"#\n\nTarko (Tool-augmented Agent Runtime Kernel, Open-source)，发音是 /ˈtɑːrkoʊ/，是一个以\n\"Tool Call\" 和 \"事件流\" 驱动的 Agent 运行时框架，内置了强大的 Context Engineering 能力。\n\n\n什么是 Tarko？#\n\nTarko 提供以下核心能力：\n\n * Context Engineering: 构建支持长程运行的 Agent 核心能力\n * Tool Call Engine: 支持多种 LLM Provider 的统一工具调用接口\n * Event Stream Processing: 原生流式处理和 Agent Protocol 支持\n * Agent Hooks: 强大的扩展能力\n * Agent Protocol: Agent 生命周期的标准格式定义\n\n\n核心特性#\n\n\n🔧 Tool Call Engine#\n\n支持多种 Tool Call 引擎，包括原生 Function Call、自定义解析器，以及不支持原生 Function Tool 的模型。\n\n\n🌊 Event Stream#\n\n内置事件流处理，支持原生流式传输和标准化的 Agent Protocol。\n\n\n🧠 Context Engineering#\n\n先进的上下文管理，支持长程运行的 Agent 操作和自动上下文优化。\n\n\n🔌 Agent Hooks#\n\n可扩展的钩子系统，允许在执行的每个阶段自定义 Agent 行为。\n\n\n架构概览#\n\nTarko 采用三层架构设计：\n\n 1. 工程层: CLI、Server 和 UI 组件\n 2. 应用层: 基于 Tarko 的 Agent 实现\n 3. 内核层: 包含 Context Engineering 和 Agent Protocol 的核心运行时\n\n\n谁在使用 Tarko？#\n\nTarko 驱动了多个生产系统：\n\n * UI-TARS-2: 先进的 UI 自动化\n * UI-TARS-desktop: 桌面自动化\n * Agent TARS: 通用多模态 Agent\n\n\n下一步#\n\n * 快速开始 - 创建你的第一个 Tarko Agent\n * 架构设计 - 了解 Tarko 的设计原理\n * 示例 - 探索实用示例","routePath":"/zh/guide/introduction","lang":"zh","toc":[{"text":"什么是 Tarko？","id":"什么是-tarko","depth":2,"charIndex":148},{"text":"核心特性","id":"核心特性","depth":2,"charIndex":389},{"text":"🔧 Tool Call Engine","id":"-tool-call-engine","depth":3,"charIndex":397},{"text":"🌊 Event Stream","id":"-event-stream","depth":3,"charIndex":492},{"text":"🧠 Context Engineering","id":"-context-engineering","depth":3,"charIndex":550},{"text":"🔌 Agent Hooks","id":"-agent-hooks","depth":3,"charIndex":612},{"text":"架构概览","id":"架构概览","depth":2,"charIndex":664},{"text":"谁在使用 Tarko？","id":"谁在使用-tarko","depth":2,"charIndex":803},{"text":"下一步","id":"下一步","depth":2,"charIndex":915}],"frontmatter":{"title":"介绍","description":"了解 Tarko，一个工具增强的 Agent 运行时内核"},"version":""},{"title":"快速开始","content":"#\n\n几分钟内开始使用 Tarko。\n\n\n前置要求#\n\n * Node.js 18+\n * npm 或 pnpm\n\n\n安装#\n\n\n创建新的 Agent#\n\n使用 Tarko CLI 的最快方式：\n\nnpm create tarko\n\n\n或使用 agent starter 模板：\n\ngit clone https://github.com/agent-infra/agent-starter\ncd agent-starter\nnpm install\n\n\n\n手动安装 Tarko 包#\n\nnpm install @tarko/agent @tarko/agent-cli\n\n\n\n基本使用#\n\n\n1. 定义你的 Agent#\n\n创建 agent.ts 文件：\n\n\n\nconst agent = new Agent({\n  name: 'MyAgent',\n  description: '一个有用的助手 Agent',\n  systemPrompt: '你是一个有用的助手。',\n  tools: [\n    // 在这里添加你的工具\n  ],\n  modelProvider: {\n    apiKey: process.env.OPENAI_API_KEY,\n    baseURL: 'https://api.openai.com/v1',\n    model: 'gpt-4'\n  }\n});\n\nexport default agent;\n\n\n\n2. 运行你的 Agent#\n\n使用 CLI 启动你的 Agent：\n\nnpx tarko run agent.ts\n\n\n这将在 http://localhost:3000 启动一个本地服务器和 Web UI。\n\n\n下一步#\n\n * 架构设计 - 了解 Tarko 的设计\n * Context Engineering - 掌握长程运行的 Agent\n * Tool Call Engine - 构建自定义工具\n * 示例 - 探索实际案例","routePath":"/zh/guide/quick-start","lang":"zh","toc":[{"text":"前置要求","id":"前置要求","depth":2,"charIndex":20},{"text":"安装","id":"安装","depth":2,"charIndex":58},{"text":"创建新的 Agent","id":"创建新的-agent","depth":3,"charIndex":64},{"text":"手动安装 Tarko 包","id":"手动安装-tarko-包","depth":3,"charIndex":227},{"text":"基本使用","id":"基本使用","depth":2,"charIndex":287},{"text":"1. 定义你的 Agent","id":"1-定义你的-agent","depth":3,"charIndex":295},{"text":"2. 运行你的 Agent","id":"2-运行你的-agent","depth":3,"charIndex":624},{"text":"下一步","id":"下一步","depth":2,"charIndex":732}],"frontmatter":{"title":"快速开始","description":"几分钟内开始使用 Tarko"},"version":""},{"title":"服务器","content":"#\n\n使用 Tarko Agent Server 构建生产就绪的 Agent 服务器。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的服务器文档，包括：\n\n * 服务器安装和配置\n * Session 管理 API\n * Query 执行 API\n * WebSocket 通信\n * 存储提供商\n * 部署指南\n\n目前请参考 英文版服务器文档 了解详细信息。","routePath":"/zh/guide/server","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":45}],"frontmatter":{"title":"服务器","description":"使用 Tarko Agent Server 构建生产就绪的 Agent 服务器"},"version":""},{"title":"Tool Call Engine","content":"#\n\n使用 Tarko 统一的 Tool Call Engine 构建自定义工具和解析器。\n\n\n即将推出#\n\n此部分正在开发中，敬请期待详细的 Tool Call Engine 文档，包括：\n\n * 基本工具创建\n * 高级工具特性\n * 自定义解析器\n * 工具配置\n * 错误处理\n\n目前请参考 英文版 Tool Call Engine 文档 了解详细信息。","routePath":"/zh/guide/tool-call-engine","lang":"zh","toc":[{"text":"即将推出","id":"即将推出","depth":2,"charIndex":47}],"frontmatter":{"title":"Tool Call Engine","description":"使用 Tarko 统一的 Tool Call Engine 构建自定义工具和解析器"},"version":""}]